{"ast":null,"code":"import isPlainObject from 'is-plain-obj';\nexport default function sortKeys(object, options = {}) {\n  if (!isPlainObject(object) && !Array.isArray(object)) {\n    throw new TypeError('Expected a plain object or array');\n  }\n\n  const {\n    deep,\n    compare\n  } = options;\n  const seenInput = [];\n  const seenOutput = [];\n\n  const deepSortArray = array => {\n    const seenIndex = seenInput.indexOf(array);\n\n    if (seenIndex !== -1) {\n      return seenOutput[seenIndex];\n    }\n\n    const result = [];\n    seenInput.push(array);\n    seenOutput.push(result);\n    result.push(...array.map(item => {\n      if (Array.isArray(item)) {\n        return deepSortArray(item);\n      }\n\n      if (isPlainObject(item)) {\n        return _sortKeys(item);\n      }\n\n      return item;\n    }));\n    return result;\n  };\n\n  const _sortKeys = object => {\n    const seenIndex = seenInput.indexOf(object);\n\n    if (seenIndex !== -1) {\n      return seenOutput[seenIndex];\n    }\n\n    const result = {};\n    const keys = Object.keys(object).sort(compare);\n    seenInput.push(object);\n    seenOutput.push(result);\n\n    for (const key of keys) {\n      const value = object[key];\n      let newValue;\n\n      if (deep && Array.isArray(value)) {\n        newValue = deepSortArray(value);\n      } else {\n        newValue = deep && isPlainObject(value) ? _sortKeys(value) : value;\n      }\n\n      Object.defineProperty(result, key, { ...Object.getOwnPropertyDescriptor(object, key),\n        value: newValue\n      });\n    }\n\n    return result;\n  };\n\n  if (Array.isArray(object)) {\n    return deep ? deepSortArray(object) : object.slice();\n  }\n\n  return _sortKeys(object);\n}","map":null,"metadata":{},"sourceType":"module"}