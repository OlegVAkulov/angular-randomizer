{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Java\\\\andersen\\\\randomizer-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport path from 'node:path';\nimport fs, { promises as fsPromises } from 'node:fs';\nimport writeFileAtomic from 'write-file-atomic';\nimport sortKeys from 'sort-keys';\nimport detectIndent from 'detect-indent';\nimport isPlainObj from 'is-plain-obj';\n\nconst init = (function_, filePath, data, options) => {\n  if (!filePath) {\n    throw new TypeError('Expected a filepath');\n  }\n\n  if (data === undefined) {\n    throw new TypeError('Expected data to stringify');\n  }\n\n  options = {\n    indent: '\\t',\n    sortKeys: false,\n    ...options\n  };\n\n  if (options.sortKeys && isPlainObj(data)) {\n    data = sortKeys(data, {\n      deep: true,\n      compare: typeof options.sortKeys === 'function' ? options.sortKeys : undefined\n    });\n  }\n\n  return function_(filePath, data, options);\n};\n\nconst main = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (filePath, data, options) {\n    let {\n      indent\n    } = options;\n    let trailingNewline = '\\n';\n\n    try {\n      const file = yield fsPromises.readFile(filePath, 'utf8');\n\n      if (!file.endsWith('\\n')) {\n        trailingNewline = '';\n      }\n\n      if (options.detectIndent) {\n        indent = detectIndent(file).indent;\n      }\n    } catch (error) {\n      if (error.code !== 'ENOENT') {\n        throw error;\n      }\n    }\n\n    const json = JSON.stringify(data, options.replacer, indent);\n    return writeFileAtomic(filePath, `${json}${trailingNewline}`, {\n      mode: options.mode,\n      chown: false\n    });\n  });\n\n  return function main(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst mainSync = (filePath, data, options) => {\n  let {\n    indent\n  } = options;\n  let trailingNewline = '\\n';\n\n  try {\n    const file = fs.readFileSync(filePath, 'utf8');\n\n    if (!file.endsWith('\\n')) {\n      trailingNewline = '';\n    }\n\n    if (options.detectIndent) {\n      indent = detectIndent(file).indent;\n    }\n  } catch (error) {\n    if (error.code !== 'ENOENT') {\n      throw error;\n    }\n  }\n\n  const json = JSON.stringify(data, options.replacer, indent);\n  return writeFileAtomic.sync(filePath, `${json}${trailingNewline}`, {\n    mode: options.mode,\n    chown: false\n  });\n};\n\nexport function writeJsonFile(_x4, _x5, _x6) {\n  return _writeJsonFile.apply(this, arguments);\n}\n\nfunction _writeJsonFile() {\n  _writeJsonFile = _asyncToGenerator(function* (filePath, data, options) {\n    yield fsPromises.mkdir(path.dirname(filePath), {\n      recursive: true\n    });\n    yield init(main, filePath, data, options);\n  });\n  return _writeJsonFile.apply(this, arguments);\n}\n\nexport function writeJsonFileSync(filePath, data, options) {\n  fs.mkdirSync(path.dirname(filePath), {\n    recursive: true\n  });\n  init(mainSync, filePath, data, options);\n}","map":null,"metadata":{},"sourceType":"module"}